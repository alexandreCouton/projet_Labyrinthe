@startuml

package controller{
    class GameController{
        - m_game : Game

        +<<Create>>GameController(game : Game)
        + placeFlyingTile(pos : Position)
        + rotateFlyingTile()
        + move(direction : Direction)
        + nextTurn()
        + captureObjective()
        + finishGame()
    }
}

package model{

    enum Direction << enumeration >> {
        UP
        RIGHT
        DOWN
        LEFT
    }

    class Game{
        - lstPlayer : Player[4]
        - m_gameBoard : GameBoard
        - m_currentPlayer : Integer
        - m_insertedFlyingTile : Boolean

        +<<Create>>Game()
        - distributeObjectivesToPlayer(lstObj : Objective[])
        + getPlayer(player : Integer) : Player
        - initPlayers()
        - placePlayer()
        + getGameBoard() : GameBoard
        + getCurrentPlayer() : Player
        + insertFlyingTile(pos : Position)
        - getCurrentPlayerPosition() : Position
        + movePlayer(direction : Direction)
        + nextTurn()
        + captureObjective()
        + finishGame()
    }

    class GameBoard{
        - m_lstTuilesGameBoard : Tiles[7][7]
        - m_StackCorner : Stack<TilesCorner>
        - m_stackT : Stack<TilesT>
        - m_stackLinear : Stack<TilesLinear>
        - m_lstObjective : ArrayList<Objective>
        - m_flyingTile : Tiles
        - m_lstObserver : ArrayList<PlateauObserver>

        +<<Create>>GameBoard()
        + addObserver(obs : PlateauObserver)
        + removeObserver(obs : PlateauObserver)
        + notifyObserverTiles(pos : Position)
        + notifyObserverEndGame()
        + getFlyTile() : Tiles
        + getGameBoard() : Tiles[][]
        + getTile(pos : Position) : Tiles
        - initObjective()
        - initTuiles()
        - initGameBoard()
        + insertFlyingTile(pos : Position)
        - placeTileOnGameBoardInit(pos : Position, tiles : Tiles)
        - initPlaceTuileT()
        - initPlaceTuileAng()
        - placerTuile()
        + inBoard(pos : Position) : Boolean
        + getTile(pos : Position) : Tiles
        + outSideBoard(pos : Position) : Position
        - placeObjective()
        + getLstObjective() : ArrayList<Objective>
    }

    class Objective{
        - m_path : String
        - m_name : String

        +<<Create>>Objective(name : String)
        +<<Create>>Objective(name : String, path : String)
        + getNameObjectif() : String
        + getPath() : String
    }

    class Pawn{
        - m_path : String
        - m_position : Position
        - m_startPosition : Position

        +<<Create>>Pawn(path : String, position : Position)
        + setPath(path : String)
        + getPath() : String
        + setPosition(position : Position)
        + getPosition() : Position
        + toStr()
        + setStartPosition(pos : Position)
        + getStartPosition() : Position
    }

    interface GameBoardObserver{
        + updateTile(pos : Position)
        + endGame()
    }

    class Player{
        - m_name : String
        - m_lstObjective : ArrayList<Objective>
        - m_objectiveCapture : Integer
        - m_pawn : Pawn
        - m_lstObserver : ArrayList<PlayerObserver>

        +<<Create>>Player(name : String)
        + addObserver(obs : PlayerObserver)
        + removeObserver(obs : PlayerObserver)
        + notifyObserver(oldPos : Position, newPos : Position)
        + setLstObjective(lstObjective : ArrayList<Objective>)
        + getLstObjective() : ArrayList<Objective>
        + getPosition() : Position
        + getPositionX() : Integer
        + getPositionY() : Integer
        + move(pos : Position)
        + setImgPawn(path : String)
        + getImgPawn() : String
        + setPawnPosition(pos : Position)
        + captureObjective(obj : Objective)
        + allObjectiveCapture() : Boolean
        + isStartPos(pos : Position) : Boolean
        + getPath() : String
        + toString() : String
        + setStartPos(pos : Position)
        + getStartPos() : Position
    }

    interface PlayerObserver{
        + movePlayer(oldPos : Position, newPos : Position, path : String)
    }

    class Position{
        - m_x : Integer
        - m_y : Integer

        +<<Create>>Position(x : Integer, y : Integer)
        + setPositionX(x : Integer)
        + setPositionY(y : Integer)
        + getPositionX() : Integer
        + getPositionY() : Integer
        + moveRight() : Position
        + moveLeft() : Position
        + moveUp() : Position
        + moveDown() : Position
        + generateRandomPosition(maxX : Integer, maxY : Integer) : Position
    }

    class Tiles{
        - m_position : Position
        - m_objective : Objective
        - m_openDirections : Boolean[4]
        - m_observers : ArrayList<TilesObserver>
        - m_rotateIndex : Integer

        +<<Create>>Tiles(up : Boolean, right : Boolean, bottom : Boolean, left : Boolean)
        +<<Create>>Tiles(objective : Objective, up : Boolean, right : Boolean, bottom : Boolean, left : Boolean)
        + addObserver(observer : TilesObserver)
        + removeObserver(observer : TilesObserver)
        + notifyObserver()
        + getOpen(direction : Direction) : Boolean
        + rotate()
        + rotate(n : Integer)
        + getPath() : String
        + getRotateIndex() : Integer
        + moveTile(direction : Direction, tile : Tiles) : Boolean
        + toStrPossibilite()
        + setObjective(obj : Objective)
        + getObjective() : Objective
        + setPath(path : String)
    }

    class TilesCorner extends Tiles{
        - m_pathTileCorner : String

        +<<Create>>TilesCorner()
        +<<Create>>TilesCorner(objective : Objective)
        + getPath() : String
        + setPath(path : String)
    }

    class TilesLinear extends Tiles{
        - m_pathTileLinear : String

        +<<Create>>TilesLinear()
        +<<Create>>TilesLinear(objective : Objective)
        + getPath() : String
        + setPath(path : String)
    }

    class TilesT extends Tiles{
        - m_pathTileT : String

        +<<Create>>TilesT()
        +<<Create>>TilesT(objective : Objective)
        + getPath() : String
        + setPath(path : String)
    }

    class TuileFactory{
        +<<Create>>TuileFactory()
        + createTileLinear() : TilesLinear
        + createTileLinear(objective : Objective) : TilesLinear
        + createTileCorner() : TilesCorner
        + createTileCorner(objective : Objective) : TilesCorner
        + createTileT() : TilesT
        + createTileT(objective : Objective) : TilesT
    }

}

package view{
    class BackgroundPanel{
        - m_backgroundImage : BufferedImage
        - m_darknessFactor : Float

        +<<Create>>BackgroundPanel(backgroundImage : BufferedImage)
        #paintComponent(g : Graphics)
    }
}

@enduml