@startuml
package view{

}


package model{

    class Position{
        -m_x : Integer
        -m_y : Integer
        +<<Create>>Position()
        +<<Create>>Position(x : Integer, y : Integer)
        +setPositionX(x : Integer)
        +setPositionY(y : Integer)
        +getPositionX() : Integer
        +getPositionY() : Integer
    }

    enum TuileOuverture{
        HAUT
        DROITE
        BAS
        GAUCHE
    }

    abstract Tuile{
        #m_image : BufferedImage
        #m_position : Position
        #m_objectif : Objectif
        #m_possibilite : Hashmap<TuileOuverture,boolean>
        /'#m_haut : Boolean
        #m_droite : Boolean
        #m_bas : Boolean
        #m_gauche : Boolean'/
        +<<Create>>Tuile(image : Image, possibilite : Hashmap<TuileOuverture,boolean>)
        +<<Create>>Tuile(image : Image, possibilite : Hashmap<TuileOuverture,boolean>, Objectif objectif)
        +getPositionTuile() : Position
        +setPositionTuile()
        +getObjectifTuile() : Objectif
        +getOuverturesTuile() :Boolean
        +getPossibiliteTuile() : Hashmap<TuileOuverture,boolean>
        +rotate()
        +rotate(n : Integer)
    }

    class TuileAngle extends Tuile{
        -m_image : BufferedImage
        +<<Create>>TuileAngle(imagePath : String)
        +<<Create>>TuileAngle(imagePath : String ,objectif : Objectif)
        -{static}loadImage(imagePath : Image)
        /'+toString() : String'/
    }
    class TuileDroite extends Tuile{
        -m_image : BufferedImage
        +<<Create>>TuileDroite()
        +<<Create>>TuileDroite(objectif : Objectif)
        +getTypeTuile() : TypeTuile
        -{static}loadImage(imagePath : Image)
        /'+toString() : String'/
    }
    class TuileT extends Tuile{
        -m_image : BufferedImage
        +<<Create>>TuileT()
        +<<Create>>TuileT(objectif : Objectif)
        -{static}loadImage(imagePath : Image)
        /'+toString() : String'/
    }
    class TuileFactory{
        +<<Create>>TuileFactory()
        +createTuileAngle() : TuileDroite
        +createTuileAngle(objectif : Objectif) : TuileDroite
        +createTuileDroite() : TuileDroite
        +createTuileDroite(objectif : Objectif) : TuileDroite
        +createTuileT() : TuileT
        +createTuileT(objectif : Objectif) : TuileT
    }


    class Objectif
    {
        -m_Path : String/'On pourra le
        mettre dans une controller'/
        -m_nom : String
        +<<Create>> Objectif(nom : String)
        +<<Create>> Objectif(nom : String, path : String)
        +getNomObjectif() : String

    }

    class Plateau{
        -m_lstJoueur : Joueur[4]
        -m_lstTuilesSurPlateau : Tuile[49]
        +<<Create>>Plateau(m_lstJoueur : Joueur[4])
        /'Prends 4 joueurs pour les placer etc...'/
        +getPlateau() : Plateau
        +getTuilePosition()
    }



}

package contoller{

    class Joueur{
        -m_nom : String
        -m_lstObjectif : Objectif[6]
        -m_objectifCapture : Integer
        +<<Create>>Joueur(nom : String)
        +jouer()
        -piocher()
        /'sera appelé dans la fonction jouer'/
        -déplacer()
        /'sera appelé dans la fonction jouer'/
    }
    class Arbitre{
        -m_plateau : Plateau
        -m_lstJoueur : Joueur[4]
        +<<Create>>Arbitre(plateau : Plateau, lstJoueur : Joueur[4])
        +initPartie() : void
        -finPartie() : void
    }

}
Plateau "1" *-- "4" Joueur
Plateau "1" *-- "49" Tuile
Tuile "1" o-- "1" Position
Tuile "1" o-- "1" Objectif
Arbitre "1" *-- "1" Plateau
Arbitre "1" *-- "1" TuileFactory
Arbitre "1" *-- "many" TuileAngle
Arbitre "1" *-- "many" TuileT
Arbitre "1" *-- "many" TuileDroite
Joueur "many" o-- "many" Objectif

@enduml