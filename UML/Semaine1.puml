@startuml
skinparam classFontStyle Bold
hide enum methods
hide interface attributes


package controller{
    class GameController {
    /'Permet de garder la trace du joueur qui joue afin de déplacer le curseur dans
    la liste de joueurs'/
      - m_joueurActuel : Integer
      + <<Create>>GameController()
      + getPathImg(path : String): String[*]
      /'Partie initialisation (grace au bouton lancer partie au début)'/
      - initPlaceTuileAng():
      - placerJoueur():
      - distribuer(joueur Joueur)
      + initPartie():
      - initObjectif():
      - initPlaceTuileT():
      /''/
      +placerTuileVolante(pos : Position)
      +deplacer(direction : TuileOuverture)
      +prochainTour()
    }
}
package model{

    class Joueur {
      + <<Create>>Joueur(nom : String)
      - m_nom: String
      - m_objectifCapture : Integer
      + setImgPion(str : String)
      - deplacer(deplacement : TuileOuverture)
      - piocher()
      + jouer()
      + setPionPosition(pos : Position)
      - setLstObjectif()
    }
    class Objectif {
      + <<Create>>Objectif(objectif : String)
      + <<Create>>Objectif(nom : String, path : String)
      - m_nom: String
      - m_path: String
      + getNomObjectif(): String
      + getObjectifCapture() : Objectif
    }
    class Pion {
      +<<Create>>Pion(str String, pos Position)
      - m_path: String
      + setPath(path String)
      + setPosition(pos Position)
      + getPath(): String
      + setPositionX(x Integer)
      + setPositionY(y Integer)
      + getPosition() : Position
      + enHaut()
      + enBas()
      + aGauche()
      + aDroite()

    }
    class Plateau {
      +<<Create>> Plateau(lstjoueur Joueur[])
      + getJoueur(): Joueur[*]
      + placerTuileSurPlateau(pos Position,tuile Tuile)
      + getPlateau(): Tuile[49]
      - placerTuile()
      -initPlaceTuileT()
      -initPlaceTuileAng()
      -placerTuile()
    }

    class Position {
      +<<Create>>Position()
      + <<Create>>Position(x : Integer, y : Integer)
      - m_x: Integer
      - m_y: Integer
      + getPositionX(): Integer
      + getPositionY(): Integer
      + setPositionX(x : Integer)
      + setPositionY(y : Integer)
    }
    abstract Tuile {
      + <<Create>>Tuile(str String, possibilite Boolean[4])
      + <<Create>>Tuile(str String, possibilite Boolean[4], objectif Objectif)
      # m_possibilite: Boolean[*]
      # m_image: String
      + getPositionTuile(): Position
      + setPositionTuile(position : Position)
      + getObjectifTuile(): Objectif
      + rotate()
      + rotate(rota Integer)
      + getOuvertureTuile(): Boolean[4]
    }
    class TuileAngle {
      + TuileAngle(imagePath String, objectif Objectif, possibilite Boolean[4])
      + TuileAngle(imagePath String, possibilite Boolean[4])
      - m_image: String
      - loadImage(path : String): String
    }
    class TuileDroite {
      + TuileDroite(imagePath String, possibilite Boolean[4])
      + TuileDroite(imagePath String, objectif Objectif, possibilite Boolean[4])
      - m_image: String
      - loadImage(path : String): String
    }
    class TuileFactory {
      + TuileFactory():
      - pathTuileDroite: String
      - pathTuileAngle: String
      - pathTuileT: String
      + createTuileT(): TuileT
      + createTuileDroite(): TuileDroite
      + createTuileDroite(Objectif): TuileDroite
      + createTuileAngle(): TuileAngle
      + createTuileAngle(Objectif): TuileAngle
      + createTuileT(Objectif): TuileT
    }
    enum TuileOuverture << enumeration >> {
      + TuileOuverture():
      + BAS:
      + HAUT:
      + DROITE:
      + GAUCHE:
    }
    class TuileT {
      + TuileT(imagePath String, objectif Objectif, possibilite Boolean[4])
      + TuileT(imagePath String, possibilite Boolean[4])
      - m_image: String
      - loadImage(path : String): String
    }
}
package view{
    interface PlateauObserver << interface >> {
      + deplacementTuile(): void
      + finPartie(): void
      + debutPartie(): void
      + deplacementJoueur(): void
      + captureObjectif(): void
    }
}




GameController  "1" *-[#595959,plain]-> "m_lstJoueur\n*" Joueur
GameController  "1" *-[#595959,plain]-> "m_lstObjectif\n*" Objectif
GameController  "1" *-[#595959,plain]-> "m_plateau\n1" Plateau
GameController   -[#595959,dashed]->  Position        : "«uses»"
GameController   -[#595959,dashed]->  TuileFactory    : "«uses»"
Joueur          "1" *-[#595959,plain]-> "m_lstObjectif\n24" Objectif
Joueur          "1" *-[#595959,plain]-> "m_pion\n1" Pion
Joueur           -[#595959,dashed]->  Pion            : "«uses»"
Joueur           -[#595959,dashed]->  Position        : "«uses»"
Joueur   -[#595959,dashed]->  TuileOuverture        : "«uses»"
Pion            "1" *-[#595959,plain]-> "m_position\n1" Position
Plateau         "1" *-[#595959,plain]-> "m_joueur\n*" Joueur
Plateau         "1" *-[#595959,plain]-> "m_lstTuilesPlateau\n*" Tuile
Plateau         "1" o-[#595959,plain]-> "m_lstT\n*" TuileT
Plateau         "1" o-[#595959,plain]-> "m_lstAngle\n*" TuileAngle
Plateau         "1" o-[#595959,plain]-> "m_lstDroite\n*" TuileDroite
Plateau          -[#595959,dashed]->  Tuile           : "«uses»"
Plateau           -[#595959,dashed]->  Position        : "«uses»"
Tuile           "1" *-[#595959,plain]-> "m_objectif\n1" Objectif
Tuile           "1" *-[#595959,plain]-> "m_position\n1" Position
Tuile           "1" *-[#595959,plain]-> "m_possibilite\n*" TuileOuverture
Tuile           -[#595959,dashed]->  Position        : "«uses»"
TuileAngle       -[#000082,plain]-^  Tuile
TuileDroite      -[#000082,plain]-^  Tuile
TuileFactory     -[#595959,dashed]->  TuileAngle      : "«uses»"
TuileFactory     -[#595959,dashed]->  TuileDroite     : "«uses»"
TuileFactory     -[#595959,dashed]->  TuileT          : "«uses»"
TuileT           -[#000082,plain]-^  Tuile
@enduml
