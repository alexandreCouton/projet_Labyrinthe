@startuml

!theme plain
top to bottom direction
skinparam linetype ortho

class AffichageConsolle {
  + AffichageConsolle(): 
  + finPartie(): void
  + deplacementJoueur(): void
  + deplacementTuile(): void
  + debutPartie(): void
  + captureObjectif(): void
}
class GameController {
  + GameController(): 
  - placerTuile(): void
  + getPathImg(String): List<String>
  - initPlaceTuileAng(): void
  - placerJoueur(): void
  + initPartie(): void
  - initObjectif(): void
  - initPlaceTuileT(): void
}
class Joueur {
  + Joueur(String): 
  - deplacer(TuileOuverture): void
  - piocher(): void
  + jouer(): void
   imgPion: String
   pionPosition: Position
}
class Objectif {
  + Objectif(String): 
  + Objectif(String, String): 
   nomObjectif: String
}
class Pion {
  + Pion(String, Position): 
  - m_position: Position
  + aDroite(): void
  + enHaut(): void
  + enBas(): void
  + aGauche(): void
   m_position: Position
   positionY: int
   positionX: int
   position: Position
   path: String
}
class Plateau {
  + Plateau(Joueur[]): 
  + placerTuileSurPlateau(Position, Tuile): void
   plateau: Tuile[][]
   joueur: Joueur[]
}
interface PlateauObserver << interface >> {
  + deplacementTuile(): void
  + finPartie(): void
  + debutPartie(): void
  + deplacementJoueur(): void
  + captureObjectif(): void
}
class Position {
  + Position(): 
  + Position(int, int): 
   positionY: int
   positionX: int
}
class Tuile {
  + Tuile(BufferedImage, HashMap<TuileOuverture, Boolean>): 
  + Tuile(BufferedImage, HashMap<TuileOuverture, Boolean>, Objectif): 
  + rotate(): void
  + rotate(int): void
   positionTuile: Position
   objectifTuile: Objectif
   ouvertureTuile: HashMap<TuileOuverture, Boolean>
}
class TuileAngle {
  + TuileAngle(String, Objectif): 
  + TuileAngle(String): 
  - loadImage(String): BufferedImage?
}
class TuileDroite {
  + TuileDroite(String): 
  + TuileDroite(String, Objectif): 
  - loadImage(String): BufferedImage?
}
class TuileFactory {
  + TuileFactory(): 
  + createTuileT(): TuileT
  + createTuileDroite(): TuileDroite
  + createTuileDroite(Objectif): TuileDroite
  + createTuileAngle(): TuileAngle
  + createTuileAngle(Objectif): TuileAngle
  + createTuileT(Objectif): TuileT
}
enum TuileOuverture << enumeration >> {
  + TuileOuverture(): 
  + valueOf(String): TuileOuverture
  + values(): TuileOuverture[]
}
class TuileT {
  + TuileT(String, Objectif): 
  + TuileT(String): 
  - loadImage(String): BufferedImage?
}

GameController    "1" *-[#595959,plain]-> "lstJoueur\n*" Joueur            
GameController     -[#595959,dashed]->  Joueur            : "«create»"
GameController    "1" *-[#595959,plain]-> "lstObjectif\n*" Objectif          
GameController     -[#595959,dashed]->  Objectif          : "«create»"
GameController     -[#595959,dashed]->  Plateau           : "«create»"
GameController    "1" *-[#595959,plain]-> "m_plateau\n1" Plateau           
GameController     -[#595959,dashed]->  Position          : "«create»"
GameController    "1" *-[#595959,plain]-> "ang\n*" TuileAngle        
GameController    "1" *-[#595959,plain]-> "droite\n*" TuileDroite       
GameController     -[#595959,dashed]->  TuileFactory      : "«create»"
GameController    "1" *-[#595959,plain]-> "m_factory\n1" TuileFactory      
GameController    "1" *-[#595959,plain]-> "t\n*" TuileT            
Joueur            "1" *-[#595959,plain]-> "m_lstObjectif\n*" Objectif          
Joueur            "1" *-[#595959,plain]-> "m_pion\n1" Pion              
Joueur             -[#595959,dashed]->  Pion              : "«create»"
Joueur             -[#595959,dashed]->  Position          : "«create»"
Pion              "1" *-[#595959,plain]-> "m_position\n1" Position          
Plateau           "1" *-[#595959,plain]-> "m_joueur\n*" Joueur            
Plateau           "1" *-[#595959,plain]-> "m_lstTuilesPlateau\n*" Tuile             
Plateau            -[#595959,dashed]->  Tuile             : "«create»"
Tuile             "1" *-[#595959,plain]-> "m_objectif\n1" Objectif          
Tuile             "1" *-[#595959,plain]-> "m_position\n1" Position          
Tuile             "1" *-[#595959,plain]-> "m_possibilite\n*" TuileOuverture    
TuileAngle         -[#000082,plain]-^  Tuile             
TuileDroite        -[#000082,plain]-^  Tuile             
TuileFactory       -[#595959,dashed]->  TuileAngle        : "«create»"
TuileFactory       -[#595959,dashed]->  TuileDroite       : "«create»"
TuileFactory       -[#595959,dashed]->  TuileT            : "«create»"
TuileT             -[#000082,plain]-^  Tuile             
@enduml
